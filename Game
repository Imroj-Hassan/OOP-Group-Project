package main;

public class MainClass {

	public static void main(String[] args) {
      new Game();
	}

}
package main;

public class Game implements Runnable {
	
	private GameWindow gameWindow;
	private GamePanel gamePanel;
	private Thread gameThread;
	private final int FPS_SET= 120;
	
	public Game() {
		gamePanel = new GamePanel();
		gameWindow = new GameWindow(gamePanel);
		gamePanel.requestFocus();
		startGameLoop();
	}
    private void startGameLoop() {
    	gameThread= new Thread(this);
    	gameThread.start();
    }
	@Override
	public void run() {
		double timePerFrame= 1000000000.0/FPS_SET;
		long lastFrame= System.nanoTime();
		long now = System.nanoTime();
		int frames=0;
		long lastCheck= System.currentTimeMillis();
		while(true) {
			now = System.nanoTime();
			if(now-lastFrame>=timePerFrame) {
				gamePanel.repaint();
				lastFrame = now;
				frames++;
			}
			
	        if(System.currentTimeMillis()-lastCheck>=1000) {
	        	lastCheck=System.currentTimeMillis();
	        	System.out.println("FPS:" + frames);
	        	frames=0;
	        }
		}
	}

}
package main;

import javax.swing.JFrame;

public class GameWindow {
	private JFrame jframe;
   public GameWindow(GamePanel gamePanel) {
	   jframe = new JFrame();
	   jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	   jframe.add(gamePanel);
	   jframe.setLocationRelativeTo(null);
	   jframe.setResizable(false);
	   jframe.pack();
	   jframe.setVisible(true);
   }
   }

package main;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JPanel;
import inputs.KeyboardInputs;
import inputs.MouseInputs;
import static utilz.Constants.PlayerConstants.*;
import static utilz.Constants.Directions.*;

public class GamePanel extends JPanel {
	private MouseInputs mouseInputs;
	private float xDelta=100,yDelta=100;
	private BufferedImage img;
	private BufferedImage[][] animations;
	private int aniTick,aniIndex,aniSpeed=15;
	private int playerAction= IDLE;
	private int playerDir = -1;
	private boolean moving = false;
	
     public GamePanel() {
    	 mouseInputs = new MouseInputs(this);
    	 importImg();
    	 loadAnimations();
    	 setPanelSize();
    	 addKeyListener(new KeyboardInputs(this));
    	 addMouseListener(mouseInputs);
    	 addMouseMotionListener(mouseInputs);
     }
     private void loadAnimations() {
    	 animations= new BufferedImage[9][6];
    	 for(int j=0; j<animations.length;j++)
    	 for(int i=0; i<animations[j].length;i++)
    		 animations[j][i]=img.getSubimage(i*64, j*40, 64, 40);
	}
	private void importImg() {
		InputStream is = getClass().getResourceAsStream("/player_sprites.png");
		try {
			img= ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();}
		finally {
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	private void setPanelSize() {
		Dimension size= new Dimension(1280,800);
		setMinimumSize(size);
		setPreferredSize(size);
		setMaximumSize(size);
	}
	public void setdirection(int direction) {
		this.playerDir =direction;
		moving = true;
	}
	public void setMoving(boolean moving) {
		this.moving= moving;
	}
     private void updateAnimation() {
 		aniTick++;
 		if(aniTick>=aniSpeed) {
 			aniTick=0;
 			aniIndex++;
 			if(aniIndex>= GetSpriteAmount(playerAction) )
 				aniIndex=0;	
 		}       
 	}
     private void setAnimation() {
 		if(moving)
 			playerAction =RUNNING;
 		else 
 			playerAction =IDLE;
 	}
 	private void updatePos() {
 		if(moving) {
 			switch (playerDir) {
 			case LEFT:
 				xDelta-=5;
 				break;
 			case UP:
 				yDelta-=5;
 				break;
 			case RIGHT:
 				xDelta+=5;
 				break;
 			case DOWN:
 				yDelta+=5;
 				break;
 			}
 		}
 			
	}
     public void paintComponent(Graphics g) {
        super.paintComponent(g);
        updateAnimation();
        setAnimation();
        updatePos();
        g.drawImage(animations[playerAction][aniIndex], (int)xDelta, (int)yDelta,256,160, null);
     }
}
package inputs;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import main.GamePanel;
import static utilz.Constants.Directions.*;

public class KeyboardInputs implements KeyListener {
	private GamePanel gamePanel;
	public KeyboardInputs (GamePanel gamePanel) {
	this.gamePanel=gamePanel;	
	}
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub		
	}
	@Override
	public void keyReleased(KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_W:
		case KeyEvent.VK_A:
		case KeyEvent.VK_S:
		case KeyEvent.VK_D:
			gamePanel.setMoving(false);
			break;
		}		
	}
	@Override
	public void keyPressed(KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_W:
			gamePanel.setdirection(UP);
			break;
		case KeyEvent.VK_A:
			gamePanel.setdirection(LEFT);
			break;
		case KeyEvent.VK_S:
			gamePanel.setdirection(DOWN);
			break;
		case KeyEvent.VK_D:
			gamePanel.setdirection(RIGHT);
			break;
		}
	}
}
package inputs;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import main.GamePanel;

public class MouseInputs implements MouseListener,MouseMotionListener {
	private GamePanel gamePanel;
	public MouseInputs(GamePanel gamePanel) {
		this.gamePanel= gamePanel;
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		//gamePanel.setRectPos(e.getX(),e.getY());	
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		System.out.println("clicked");

		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

}
package utilz;

public class Constants {
	public static class Directions {
		public static final int LEFT = 0;
		public static final int UP = 1;
		public static final int RIGHT = 2;
		public static final int DOWN = 3;
	}
	public static class PlayerConstants{
		  public static final int IDLE = 0;
  public static final int RUNNING = 1;
  public static final int JUMP = 2;
  public static final int FALLING = 3;
  public static final int GROUND = 4;
  public static final int HIT = 5;
  public static final int ATTACK_1=6;
  public static final int ATTACK_JUMP_1=7;
  public static final int ATTACK_JUMP_2=8;
  
  public static int GetSpriteAmount(int player_action) {
	  switch(player_action) {
	  case RUNNING:
		  return 6;
	  case IDLE:
		  return 5;
	  case HIT:
		  return 4;
	  case JUMP:
	  case ATTACK_1:
	  case ATTACK_JUMP_1:
	  case ATTACK_JUMP_2:
		  return 3;
	  case GROUND:
		  return 2;
	  case FALLING:
		  default:
			  return 1;
	  }
  }
  
	}
}
