package main;

public class MainClass {

	public static void main(String[] args) {
      new Game();
	}

}
package main;

public class Game implements Runnable {
	
	private GameWindow gameWindow;
	private GamePanel gamePanel;
	private Thread gameThread;
	private final int FPS_SET= 120;
	
	public Game() {
		gamePanel = new GamePanel();
		gameWindow = new GameWindow(gamePanel);
		gamePanel.requestFocus();
		startGameLoop();
	}
    private void startGameLoop() {
    	gameThread= new Thread(this);
    	gameThread.start();
    }
	@Override
	public void run() {
		double timePerFrame= 1000000000.0/FPS_SET;
		long lastFrame= System.nanoTime();
		long now = System.nanoTime();
		int frames=0;
		long lastCheck= System.currentTimeMillis();
		while(true) {
			now = System.nanoTime();
			if(now-lastFrame>=timePerFrame) {
				gamePanel.repaint();
				lastFrame = now;
				frames++;
			}
			
	        if(System.currentTimeMillis()-lastCheck>=1000) {
	        	lastCheck=System.currentTimeMillis();
	        	System.out.println("FPS:" + frames);
	        	frames=0;
	        }
		}
	}

}
package main;

import javax.swing.JFrame;

public class GameWindow {
	private JFrame jframe;
   public GameWindow(GamePanel gamePanel) {
	   jframe = new JFrame();
	   jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	   jframe.add(gamePanel);
	   jframe.setLocationRelativeTo(null);
	   jframe.setResizable(false);
	   jframe.pack();
	   jframe.setVisible(true);
   }
   }

package main;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import inputs.KeyboardInputs;
import inputs.MouseInputs;

public class GamePanel extends JPanel {
	private MouseInputs mouseInputs;
	private float xDelta=100,yDelta=100;
	private BufferedImage img, subImg;
	
     public GamePanel() {
    	 mouseInputs = new MouseInputs(this);
    	 importImg();
    	 setPanelSize();
    	 addKeyListener(new KeyboardInputs(this));
    	 addMouseListener(mouseInputs);
    	 addMouseMotionListener(mouseInputs);
     }
     private void importImg() {
		InputStream is = getClass().getResourceAsStream("/player_sprites.png");
		try {
			img= ImageIO.read(is);
		} catch (IOException e) {
			e.printStackTrace();}
		finally {
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	private void setPanelSize() {
		Dimension size= new Dimension(1280,800);
		setMinimumSize(size);
		setPreferredSize(size);
		setMaximumSize(size);
	}
	public void changeXDelta(int value) {
    	this.xDelta += value;
     }
     public void changeYDelta(int value) {
     	this.yDelta += value;
      }
     public void setRectPos(int x, int y) {
    	 this.xDelta=x;
    	 this.yDelta=y;
     }
     public void paintComponent(Graphics g) {
        super.paintComponent(g);
        subImg= img.getSubimage(1*64, 8*40, 64, 40);
        g.drawImage(subImg, (int)xDelta, (int)yDelta,128,80, null);
     }
}
package inputs;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import main.GamePanel;

public class KeyboardInputs implements KeyListener {
	private GamePanel gamePanel;
	public KeyboardInputs (GamePanel gamePanel) {
	this.gamePanel=gamePanel;	
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_W:
			gamePanel.changeYDelta(-5);
			break;
		case KeyEvent.VK_A:
			gamePanel.changeXDelta(-5);
			break;
		case KeyEvent.VK_S:
			gamePanel.changeYDelta(5);
			break;
		case KeyEvent.VK_D:
			gamePanel.changeXDelta(5);
			break;
		}
		
	}

}
package inputs;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import main.GamePanel;

public class MouseInputs implements MouseListener,MouseMotionListener {
	private GamePanel gamePanel;
	public MouseInputs(GamePanel gamePanel) {
		this.gamePanel= gamePanel;
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		gamePanel.setRectPos(e.getX(),e.getY());	
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		System.out.println("clicked");

		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

}
